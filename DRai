{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"DRai","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"metadata":{"id":"tNB0-bxY1eR5","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"beedf7ad-e4cd-4fdf-efca-a3df045e75c9","executionInfo":{"status":"ok","timestamp":1548591878666,"user_tz":0,"elapsed":481,"user":{"displayName":"Becky Ball","photoUrl":"","userId":"06726843102671753691"}}},"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"],"name":"stdout"}]},{"metadata":{"id":"3yaY4pc_1sFX","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":526},"outputId":"a6cc150e-e5ff-4939-c2fd-b97a499c98f6","executionInfo":{"status":"ok","timestamp":1548598097345,"user_tz":0,"elapsed":239616,"user":{"displayName":"Becky Ball","photoUrl":"","userId":"06726843102671753691"}}},"cell_type":"code","source":["import os\n","\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from PIL import Image\n","\n","import torch\n","import torch.nn.functional as F\n","from torchvision import transforms, models\n","from torch.utils.data import Dataset, DataLoader\n","\n","from PIL import ImageFile\n","ImageFile.LOAD_TRUNCATED_IMAGES = True\n","\n","\n","use_cuda = torch.cuda.is_available()\n","use_cuda=False\n","device = torch.device(\"cuda\" if use_cuda else \"cpu\")\n","\n","############### Data preprocessing ###################\n","def create_csv(root=\"/content/gdrive/My Drive/data/\", out_name='labels.csv'):\n","    subfolders = [f.path for f in os.scandir(root) if f.is_dir()]\n","    df = pd.DataFrame(columns=['file_path', 'label'])\n","    for i, path in enumerate(subfolders):\n","        files = [f.path for f in os.scandir(path) if f.is_file()]\n","        for f in files:\n","            df = df.append({'file_path':f, 'label':i}, ignore_index=True)\n","    df.to_csv(root+out_name, index=False)\n","    \n","class ClassificationDataset(Dataset):\n","\n","    def __init__(self, csv='/content/gdrive/My Drive/data/labels.csv', transform=None):\n","        self.csv = pd.read_csv(csv)\n","        self.data_size = len(self.csv)\n","        self.idx_to_data = dict(zip(range(self.data_size), zip(self.csv['file_path'].tolist(), self.csv['label'].tolist())))\n","        self.transform = transform\n","\n","    def __len__(self):\n","        return self.data_size\n","\n","    def __getitem__(self, idx):\n","        filepath, label = self.idx_to_data[int(idx)]\n","        img = Image.open(filepath).convert(\"RGB\")\n","        if self.transform:\n","            img, label = self.transform((img, label))\n","        return img, label\n","\n","class SquareResize():\n","    \"\"\"Adjust aspect ratio of image to make it square\"\"\"\n","\n","    def __init__(self, output_size):\n","        assert isinstance(output_size, (int, tuple)) # assert output_size is int or tuple\n","        self.output_size = output_size\n","\n","    def __call__(self, sample):        \n","        image, label = sample\n","        h, w = image.size\n","        if h>w:\n","            new_w = self.output_size\n","            scale = new_w/w\n","            new_h = scale*h\n","        elif w>h:\n","            new_h = self.output_size\n","            scale = new_h/h\n","            new_w = scale*w\n","        else:\n","            new_h, new_w = self.output_size, self.output_size\n","        new_h, new_w = int(new_h), int(new_w) # account for non-integer computed dimensions (rounds to nearest int)\n","        image = image.resize((new_h, new_w))\n","        image = image.crop((0, 0, self.output_size, self.output_size))\n","        return image, label\n","\n","class ToTensor():\n","    def __init__(self):\n","        pass\n","\n","    def __call__(self, sample):\n","        image, label = sample\n","        image = np.array(image)/255\n","        image = image.transpose((2, 0, 1))\n","        return torch.Tensor(image), label\n","############### End of data preprocessing ###################\n","\n","class VGGClassifier(torch.nn.Module):\n","    def __init__(self, out_size):\n","        super().__init__()\n","        self.features = models.vgg11(pretrained=True).features #512x7x7\n","        self.regressor = torch.nn.Sequential(\n","            torch.nn.Linear(512*7*7, 4096),\n","            torch.nn.ReLU(),\n","            torch.nn.Dropout(),\n","            torch.nn.Linear(4096, 1024),\n","            torch.nn.ReLU(),\n","            torch.nn.Linear(1024, out_size),\n","            torch.nn.Softmax(dim=1)\n","            )\n","\n","    def forward(self, x):\n","        x = F.relu(self.features(x)).reshape(-1, 512*7*7)\n","        x = self.regressor(x)\n","        return x\n","\n","    def freeze(self):\n","        for param in self.features.parameters():\n","            param.requires_grad=False\n","\n","    def unfreeze(self):\n","        for param in self.features.parameters():\n","            param.requires_grad=True\n","\n","create_csv()\n","\n","classnames = [f.name for f in os.scandir(\"/content/gdrive/My Drive/data/\")if f.is_dir()]\n","classname_to_id = dict(zip(classnames, range(len(classnames))))\n","id_to_classname = dict(zip(classname_to_id.values(), classname_to_id.keys()))\n","n_classes = len(classnames)\n","\n","lr = [3e-5, 3e-6] #differential learning rate. #lr[0] is main lr #lr[1] is lr of early layers\n","weight_decay = 0#1e-4\n","batch_size = 5\n","train_split = 0.8\n","val_split = 0.9\n","\n","mymodel = VGGClassifier(out_size=n_classes).to(device)\n","\n","optimizer = torch.optim.Adam([{'params': mymodel.regressor.parameters()},\n","                                 {'params': mymodel.features.parameters(), 'lr': lr[1]}],\n","                                 lr=lr[0], weight_decay=weight_decay)\n","mytransforms = []\n","mytransforms.append(SquareResize(224))\n","mytransforms.append(ToTensor())\n","mytransforms = transforms.Compose(mytransforms)\n","\n","mydataset = ClassificationDataset(csv='/content/gdrive/My Drive/data/labels.csv', transform=mytransforms)\n","\n","data_size=len(mydataset)\n","train_size = int(train_split * data_size)\n","val_size = int(val_split * data_size) - train_size\n","test_size = data_size - (val_size + train_size)\n","train_data, val_data, test_data = torch.utils.data.random_split(mydataset, [train_size, val_size, test_size])\n","\n","train_samples = DataLoader(train_data, batch_size=batch_size, shuffle=True)\n","val_samples = DataLoader(val_data, batch_size=batch_size, shuffle=True)\n","test_samples = DataLoader(test_data, batch_size=batch_size, shuffle=False)\n","\n","def train(epochs):\n","    plt.close()\n","    mymodel.train()\n","    \n","    bcosts = []\n","    ecosts = []\n","    valcosts = []\n","    plt.ion()\n","    fig = plt.figure(figsize=(10, 5))\n","    ax = fig.add_subplot(121)\n","    #ax1 = fig.add_subplot(132)\n","    ax2 = fig.add_subplot(122)\n","    \n","    plt.show()\n","    ax.set_xlabel('Epoch')\n","    ax.set_ylabel('Cost')\n","\n","    #ax1.set_xlabel('Batch')\n","    #ax1.set_ylabel('Cost')\n","\n","    ax2.axis('off')\n","    img_label_text = ax2.text(0, -5, '', fontsize=15)\n","    \n","    for e in range(epochs):\n","        ecost=0\n","        valcost=0\n","        for i, (x, y) in enumerate(train_samples):\n","            x, y = x.to(device), y.to(device)\n","\n","            h = mymodel.forward(x) #calculate hypothesis\n","            cost = F.cross_entropy(h, y, reduction='sum') #calculate cost\n","            \n","            optimizer.zero_grad() #zero gradients\n","            cost.backward() # calculate derivatives of values of filters\n","            optimizer.step() #update parameters\n","\n","            bcosts.append(cost.item()/batch_size)\n","            #ax1.plot(bcosts, 'b', label='Train cost')\n","            #if e==0 and i==0: ax1.legend()\n","            \n","            y_ind=0\n","            im = np.array(x[y_ind]).transpose(1, 2, 0)\n","            predicted_class = id_to_classname[h.max(1)[1][y_ind].item()]\n","            ax2.imshow(im)\n","            img_label_text.set_text('Predicted class: '+ predicted_class)\n","            \n","            fig.canvas.draw()\n","            ecost+=cost.item()\n","        #classes_shown=set()\n","        for i, (x, y) in enumerate(val_samples):\n","            x, y = x.to(device), y.to(device)\n","\n","            h = mymodel.forward(x) #calculate hypothesis\n","            cost = F.cross_entropy(h, y, reduction='sum') #calculate cost\n","\n","            '''for y_ind, yval in enumerate(y):\n","                if yval.item() not in classes_shown:\n","                    classes_shown.add(yval.item())\n","                    break'''\n","            y_ind=0\n","            im = np.array(x[y_ind]).transpose(1, 2, 0)\n","            predicted_class = id_to_classname[h.max(1)[1][y_ind].item()]\n","            ax2.imshow(im)\n","            img_label_text.set_text('Predicted class: '+ predicted_class)\n","            fig.canvas.draw()\n","            \n","            valcost+=cost.item()\n","        ecost/=train_size\n","        valcost/=val_size\n","        ecosts.append(ecost)\n","        valcosts.append(valcost)\n","        ax.plot(ecosts, 'b', label='Train cost')\n","        ax.plot(valcosts, 'r', label='Validation cost')\n","        if e==0: ax.legend()\n","        fig.canvas.draw()\n","\n","        print('Epoch', e, '\\tCost', ecost)\n","\n","def test():\n","    print('Started evaluation...')\n","    mymodel.eval() #put model into evaluation mode\n","    \n","    #calculate the accuracy of our model over the whole test set in batches\n","    correct = 0\n","    for x, y in test_samples:\n","        x, y = x.to(device), y.to(device)\n","        h = mymodel.forward(x)\n","        pred = h.data.max(1)[1]\n","        correct += pred.eq(y).sum().item()\n","    return round(correct/len(test_data), 4)\n","\n","mymodel.freeze()\n","train(10)\n","#mymodel.unfreeze()\n","#train(5)\n","\n","acc = test()\n","print('Test accuracy: ', acc)\n","\n"],"execution_count":11,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nc/z48Xz00UdZsWJFK487p+XLl+fhhx8+4e+TqsvP/VdpjqQ+O8z+ak/215drWmDV5U9UzDVHktnf\nqTM5OZndu3fnkksuOeVnnK9Gs4yNjeXCCy/M6tWrW3G8BZlrlqNHj+aMM87IPffck61bt2bHjh2t\nOua8zDXLaaedlltuuSUDAwO59NJL861vfSvr1q1r1VEb6uzszOmnn37Ca3X5uf8qzZHUZ4fZX+3J\n/vpyp+xN7lVNfhvEieZ45513cvPNN2d4ePhzD7R299lZ3nvvvYyNjeX6669v4YkW77OzVFWVI0eO\n5Nprr82jjz6al19+Oc8991zrDrdAn51lZmYmDz30UJ555pn85S9/yb59+/LKK6+08HT/P9VlfyX1\n2WH2V3uyv/5P0wKrLn+iYq45kv8+gG688cbceuut2bRpUyuOOG9zzbJnz54cPXo0V111VX70ox/l\nwIEDGR0dbdVRG5prlpUrV2bVqlU5++yzs3Tp0lx00UU5ePBgq47a0FyzHD58OGvXrk1PT0+WL1+e\nCy64IPv372/VUU9KXX7uv0pzJPXZYfZXe7K/vlzTAqsuf6JirjmS/77mf9111+Xiiy9u1RHnba5Z\nLrvssjz99NN58skn88ADD6S/vz/btm1r5XHnNNcsnZ2dWbt2bV577bXZ6+38tPRcs6xevTqHDx/O\nxx9/nCTZv39/zjnnnFYd9aTU5ef+qzRHUp8dZn+1J/vryzX1N7nX5U9UfNkcmzZtyre//e2cf/75\nsx97+eWXZ3BwsIWnndtc98n/euONN3LHHXfkkUceaeFJG5trlomJidx+++2pqirnnntu7rrrrixZ\n0r6/9m2uWZ544omMjY1l6dKlOf/88/OLX/yi1cf9Uvv378+9996bN998M52dnfna176WzZs3Z82a\nNbX5uf+qzZHUZ4fZX+3J/joxfyoHAKCw9k1iAICvKIEFAFCYwAIAKExgAQAUJrAAAAoTWAAAhQks\nAIDCBBYAQGH/Ax/eFw4Zbm14AAAAAElFTkSuQmCC\n","text/plain":["<Figure size 720x360 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Epoch 0 \tCost 0.6894236728549004\n","Epoch 1 \tCost 0.6311312727630138\n","Epoch 2 \tCost 0.5863237231969833\n","Epoch 3 \tCost 0.5422273501753807\n","Epoch 4 \tCost 0.48256690986454487\n","Epoch 5 \tCost 0.4289163425564766\n","Epoch 6 \tCost 0.39584089256823063\n","Epoch 7 \tCost 0.37576897256076336\n","Epoch 8 \tCost 0.35226980969309807\n","Epoch 9 \tCost 0.3340861462056637\n","Started evaluation...\n","Test accuracy:  0.6\n"],"name":"stdout"}]},{"metadata":{"id":"lOeltXWP5NaE","colab_type":"code","colab":{}},"cell_type":"code","source":["acc = test()\n","print('Test accuracy: ', acc)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"ZJ2aKYwShIQT","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]}]}